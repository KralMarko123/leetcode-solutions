export const BEST_TIME_TO_BUY_AND_SELL_STOCK_DESCRIPTION = `You are given an array prices where price[i] is the price of a given stock on the ith i. You want to maximize your profit by choosing a single i to buy one stock and choosing a different i in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0`;
export const BINARY_SEARCH_DESCRIPTION = `Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.`;
export const ARITHMETIC_PROGRESSION_DESCRIPTION = `A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same. Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.`;
export const LONGEST_CONSECUTIVE_SEQUENCE_DESCRIPTION = `Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.`;
export const MIN_STACK_DESCRIPTION = `Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.`;
export const CAN_PLACE_FLOWERS_DESCRIPTION = `You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots. Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.`;
export const CONTAINS_DUPLICATE_DESCRIPTION = `Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.`;
export const CONTAINS_DUPLICATE_TWO_DESCRIPTION = `Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.`;
export const EXCEL_SHEET_COLUMN_NUMBER_DESCRIPTION = `Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.`;
export const FIND_NUMBERS_WITH_EVEN_NUMBER_OF_DIGITS_DESCRIPTION = `Given an array nums of integers, return how many of them contain an even number of digits.`;
export const FIND_INDEX_OF_FIRST_OCCURRENCE_IN_A_STRING_DESCRIPTION = `Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.`;
export const FIRST_UNIQUE_CHARACTER_IN_A_STRING_DESCRIPTION = `Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.`;
export const FIZZ_BUZZ_DESCRIPTION = `Given an integer n, return a string array answer (1-indexed) where:\n\nanswer[i] == "FizzBuzz" if i is divisible by 3 and 5.\nanswer[i] == "Fizz" if i is divisible by 3.\nanswer[i] == "Buzz" if i is divisible by 5.\nanswer[i] == i (as a string) if none of the above conditions are true.
`;
export const HAPPY_NUMBER_DESCRIPTION = `Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process:\n\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\n\nReturn true if n is a happy number, and false if not.`;
export const INTERSECTION_OF_TWO_ARRAYS_DESCRIPTION = `Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.`;
export const REVER_INTEGER_DESCRIPTION = `Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).`;
export const MEDIAN_OF_TWO_SORTED_ARRAYS_DESCRIPTION =
	'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).';
export const ZIGZAG_CONVERSION_DESCRIPTION = `The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: "PAHNAPLSIIGYIR". Write the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);`;
export const TWO_SUM_DESCRIPTION = `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.`;
export const THREE_SUM_DESCRIPTION = `Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.`;
export const STRING_TO_INTEGER_ATOI_DESCRIPTION = `Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer(similar to C/C++'s atoi function). The algorithm for myAtoi(string s) is as follows:\n\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0.\nChange the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\nReturn the integer as the final result.\n\nNote:\n\nOnly the space character ' ' is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.`;
export const REMOVE_NTH_NODE_FROM_END_OF_LIST_DESCRIPTION = `Given the head of a linked list, remove the nth node from the end of the list and return its head.`;
export const VALID_PARENTHESES_DESCRIPTION = `Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.`;
